env:
  CIRRUS_CLONE_DEPTH: "20"
  CIRRUS_SHELL: bash

  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  DEVELOCITY_TOKEN: VAULT[development/kv/data/develocity data.token]
  DEVELOCITY_ACCESS_KEY: develocity.sonar.build=${DEVELOCITY_TOKEN}
  SLACK_TOKEN: VAULT[development/kv/data/slack data.token]
  SLACK_CHANNEL: squad-ide-mcp-server-bots
  GRADLE_VERSION: "8.13"
  GRADLE_USER_HOME: ${CIRRUS_WORKING_DIR}/.gradle_cache

only_pr_and_maintained_branches: &ONLY_PR_AND_MAINTAINED_BRANCHES
  skip: "changesIncludeOnly('README.md')"
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && $CIRRUS_BUILD_SOURCE != "cron"
    && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == $CIRRUS_DEFAULT_BRANCH || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

only_main_branches: &ONLY_MAIN_BRANCHES
  skip: "changesIncludeOnly('*.txt', '**/README.md')"
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && ($CIRRUS_BRANCH == $CIRRUS_DEFAULT_BRANCH || $CIRRUS_BRANCH =~ "branch-.*") && $CIRRUS_BUILD_SOURCE != "cron"

eks_container_definition: &CONTAINER_DEFINITION
  image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j21-latest
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  region: eu-central-1
  namespace: default

setup_gradle_cache_template: &SETUP_GRADLE_CACHE
  gradle_cache:
    folder: ${GRADLE_USER_HOME}/caches
    fingerprint_script:
      - echo $CIRRUS_OS
      - cat **/*.gradle* gradle/wrapper/gradle-wrapper.properties || true
    populate_script:
      - mkdir -p ${GRADLE_USER_HOME}/caches

cleanup_gradle_cache_script_template: &CLEANUP_GRADLE_CACHE_SCRIPT
  cleanup_gradle_script: |
    rm -rf ${GRADLE_USER_HOME}/caches/$GRADLE_VERSION/
    rm -rf ${GRADLE_USER_HOME}/daemon/
    rm -rf ${GRADLE_USER_HOME}/caches/transforms-*
    rm -rf ${GRADLE_USER_HOME}/caches/journal-*
    /usr/bin/find ${GRADLE_USER_HOME}/caches/ -name "*.lock" -type f -delete

build_task:
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 1
    memory: 4G
  env:
    ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa
    ARTIFACTORY_DEPLOY_USERNAME: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer username]
    ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
    DEPLOY_PULL_REQUEST: "true"
    SONAR_HOST_URL: VAULT[development/kv/data/sonarcloud data.url]
    SONAR_TOKEN: VAULT[development/kv/data/sonarcloud data.token]
  build_script:
    - source cirrus-env BUILD
    - source .cirrus/use-gradle-wrapper.sh
    - source set_gradle_build_version
    - regular_gradle_build_deploy_analyze :cyclonedxBom jacocoTestReport

sonarqube_us_analysis_task:
  only_if: $CIRRUS_CRON == "twice-daily"
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 1
    memory: 4G
  env:
    ARTIFACTORY_DEPLOY_USERNAME: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer username]
    ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
    DEPLOY_PULL_REQUEST: "true"
    SONAR_HOST_URL: VAULT[development/kv/data/sonarqube-us data.url]
    SONAR_TOKEN: VAULT[development/kv/data/sonarqube-us data.token]
  build_script:
    - source cirrus-env BUILD
    - source .cirrus/use-gradle-wrapper.sh
    - source set_gradle_build_version
    - regular_gradle_build_deploy_analyze :cyclonedxBom jacocoTestReport -Dmaven.deploy.skip=true

sonarqube_next_analysis_task:
  only_if: $CIRRUS_CRON == "twice-daily"
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 1
    memory: 4G
  env:
    ARTIFACTORY_DEPLOY_USERNAME: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer username]
    ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
    DEPLOY_PULL_REQUEST: "true"
    SONAR_HOST_URL: VAULT[development/kv/data/next data.url]
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
  build_script:
    - source cirrus-env BUILD
    - source .cirrus/use-gradle-wrapper.sh
    - source set_gradle_build_version
    - regular_gradle_build_deploy_analyze :cyclonedxBom jacocoTestReport -Dmaven.deploy.skip=true

run_iris_task:
  depends_on:
    - build
    - sonarqube_us_analysis
    - sonarqube_next_analysis
  only_if: $CIRRUS_CRON == "twice-daily"
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 1
    memory: 2G
  env:
    SONAR_SQC_EU_URL: VAULT[development/kv/data/sonarcloud data.url]
    SONAR_SQC_US_URL: VAULT[development/kv/data/sonarqube-us data.url]
    SONAR_NEXT_URL: VAULT[development/kv/data/next data.url]
    SONAR_IRIS_NEXT_TOKEN: VAULT[development/kv/data/iris data.next]
    SONAR_IRIS_SQC_EU_TOKEN: VAULT[development/kv/data/iris data.sqc-eu]
    SONAR_IRIS_SQC_US_TOKEN: VAULT[development/kv/data/iris data.sqc-us]
    ARTIFACTORY_USERNAME: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader username]
    ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
    IRIS_SOURCE_PROJECT_KEY: "SonarSource_sonarqube-mcp-server"
    IRIS_DESTINATION_PROJECT_KEY: "SonarSource_sonarqube-mcp-server"
  iris_script: |
    chmod +x .cirrus/run-iris.sh
    .cirrus/run-iris.sh

mend_scan_task:
  depends_on:
    - build
  <<: *ONLY_MAIN_BRANCHES
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 1
    memory: 2G
  env:
    WS_APIKEY: VAULT[development/kv/data/mend data.apikey]
  <<: *SETUP_GRADLE_CACHE
  mend_script: |
    source cirrus-env QA
    source .cirrus/use-gradle-wrapper.sh
    source set_gradle_build_version
    source ws_scan.sh
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT
  allow_failures: "true"
  always:
    ws_scan_artifacts:
      path: "whitesource/**/*"
  on_failure:
    slack_notification_script: |
      source slack-failure-notification

promote_task:
  depends_on:
    - build
    - mend_scan
  <<: *ONLY_PR_AND_MAINTAINED_BRANCHES
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 1
    memory: 1G
  env:
    ARTIFACTORY_PROMOTE_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promoter access_token]
    GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]
    JDK_VERSION: "21"
  <<: *SETUP_GRADLE_CACHE
  promote_script: |
    source .cirrus/use-gradle-wrapper.sh
    cirrus_promote_gradle
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT
  on_failure:
    slack_notification_script: |
      source slack-failure-notification
